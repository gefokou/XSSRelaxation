from rdflib import Graph, Namespace, Literal, Variable, URIRef
from rdflib.namespace import RDF
from Query.ConjunctiveQueryClause import ConjunctiveQuery 
from Query.SimpleLiteral import SimpleLiteral
from Query.FilterLiteral import FilterLiteral
# DÃ©finition d'un namespace
ex = Namespace("http://example.org/")

# CrÃ©ation du graphe RDF
graph = Graph()

# Ajout de donnÃ©es dans le graphe
graph.add((URIRef("http://example.org/person1"), RDF.type, ex.Human))
graph.add((URIRef("http://example.org/person1"), ex.hasAge, Literal(25)))

graph.add((URIRef("http://example.org/person2"), RDF.type, ex.Human))
graph.add((URIRef("http://example.org/person2"), ex.hasAge, Literal(35)))

graph.add((URIRef("http://example.org/person3"), RDF.type, ex.Human))
graph.add((URIRef("http://example.org/person3"), ex.hasAge, Literal(40)))

# CrÃ©ation des triplets pour la requÃªte
triple1 = SimpleLiteral((Variable("person"), RDF.type, ex.Human))
triple2 = SimpleLiteral((Variable("person"), ex.hasAge, Variable("age")))

# CrÃ©ation du filtre (on veut les humains avec age > 30)
filter_clause = FilterLiteral("?age > 30")

# CrÃ©ation de la requÃªte conjonctive
query = ConjunctiveQuery()
query.add_clause(triple1)
query.add_clause(triple2)
query.add_filter(filter_clause)
query.set_selected_variables(["person", "age"])  # On veut rÃ©cupÃ©rer ?person et ?age

# Affichage de la requÃªte gÃ©nÃ©rÃ©e
print("ğŸ”¹ RequÃªte SPARQL gÃ©nÃ©rÃ©e :")
print(query.to_sparql())

# ExÃ©cution de la requÃªte sur le graphe
print("\nğŸ”¹ RÃ©sultats de la requÃªte :")
results = query.execute(graph)

# Affichage des rÃ©sultats
for row in results:
    print(f"Personne: {row.person}, Ã‚ge: {row.age}")
